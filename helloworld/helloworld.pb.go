// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	Product
	User
	HelloRequest
	HelloReply
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type User struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "helloworld.Product")
	proto.RegisterType((*User)(nil), "helloworld.User")
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hello service

type HelloClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Get with Server-Side Streaming
	GetServerSideStreaming(ctx context.Context, in *User, opts ...grpc.CallOption) (Hello_GetServerSideStreamingClient, error)
	// Get with Client-Side Streaming
	GetClientSideStreaming(ctx context.Context, opts ...grpc.CallOption) (Hello_GetClientSideStreamingClient, error)
	// Get with bidirectional Streaming
	GetBiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Hello_GetBiDirectionalStreamingClient, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Hello/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) GetServerSideStreaming(ctx context.Context, in *User, opts ...grpc.CallOption) (Hello_GetServerSideStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hello_serviceDesc.Streams[0], c.cc, "/helloworld.Hello/GetServerSideStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGetServerSideStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_GetServerSideStreamingClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type helloGetServerSideStreamingClient struct {
	grpc.ClientStream
}

func (x *helloGetServerSideStreamingClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) GetClientSideStreaming(ctx context.Context, opts ...grpc.CallOption) (Hello_GetClientSideStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hello_serviceDesc.Streams[1], c.cc, "/helloworld.Hello/GetClientSideStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGetClientSideStreamingClient{stream}
	return x, nil
}

type Hello_GetClientSideStreamingClient interface {
	Send(*User) error
	CloseAndRecv() (*Product, error)
	grpc.ClientStream
}

type helloGetClientSideStreamingClient struct {
	grpc.ClientStream
}

func (x *helloGetClientSideStreamingClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloGetClientSideStreamingClient) CloseAndRecv() (*Product, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) GetBiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (Hello_GetBiDirectionalStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hello_serviceDesc.Streams[2], c.cc, "/helloworld.Hello/GetBiDirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGetBiDirectionalStreamingClient{stream}
	return x, nil
}

type Hello_GetBiDirectionalStreamingClient interface {
	Send(*User) error
	Recv() (*Product, error)
	grpc.ClientStream
}

type helloGetBiDirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *helloGetBiDirectionalStreamingClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloGetBiDirectionalStreamingClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hello service

type HelloServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Get with Server-Side Streaming
	GetServerSideStreaming(*User, Hello_GetServerSideStreamingServer) error
	// Get with Client-Side Streaming
	GetClientSideStreaming(Hello_GetClientSideStreamingServer) error
	// Get with bidirectional Streaming
	GetBiDirectionalStreaming(Hello_GetBiDirectionalStreamingServer) error
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Hello/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_GetServerSideStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).GetServerSideStreaming(m, &helloGetServerSideStreamingServer{stream})
}

type Hello_GetServerSideStreamingServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type helloGetServerSideStreamingServer struct {
	grpc.ServerStream
}

func (x *helloGetServerSideStreamingServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _Hello_GetClientSideStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).GetClientSideStreaming(&helloGetClientSideStreamingServer{stream})
}

type Hello_GetClientSideStreamingServer interface {
	SendAndClose(*Product) error
	Recv() (*User, error)
	grpc.ServerStream
}

type helloGetClientSideStreamingServer struct {
	grpc.ServerStream
}

func (x *helloGetClientSideStreamingServer) SendAndClose(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloGetClientSideStreamingServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_GetBiDirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).GetBiDirectionalStreaming(&helloGetBiDirectionalStreamingServer{stream})
}

type Hello_GetBiDirectionalStreamingServer interface {
	Send(*Product) error
	Recv() (*User, error)
	grpc.ServerStream
}

type helloGetBiDirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *helloGetBiDirectionalStreamingServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloGetBiDirectionalStreamingServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServerSideStreaming",
			Handler:       _Hello_GetServerSideStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetClientSideStreaming",
			Handler:       _Hello_GetClientSideStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBiDirectionalStreaming",
			Handler:       _Hello_GetBiDirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0x1b, 0xa9, 0x56, 0x07, 0x0f, 0x65, 0x84, 0xb2, 0x2e, 0x08, 0x92, 0x83, 0xf4, 0x54,
	0x8a, 0xde, 0x3d, 0x58, 0xa1, 0x3d, 0x4a, 0x83, 0x0f, 0x10, 0xbb, 0x43, 0x0d, 0x64, 0x93, 0x75,
	0x92, 0x2a, 0xfb, 0x2c, 0xbe, 0xac, 0x74, 0xdd, 0xa5, 0x39, 0xec, 0x69, 0x6f, 0x93, 0xff, 0xc7,
	0x2f, 0x5f, 0x30, 0xfd, 0x24, 0x6b, 0xfd, 0x8f, 0x67, 0x5b, 0x2c, 0x2a, 0xf6, 0xd1, 0x23, 0x9c,
	0x14, 0x79, 0x07, 0x93, 0x37, 0xf6, 0xc5, 0x61, 0x17, 0x11, 0x61, 0xec, 0x74, 0x49, 0x99, 0xb8,
	0x17, 0xf3, 0xab, 0x6d, 0x33, 0xcb, 0x1c, 0xc6, 0xef, 0x81, 0xb8, 0xd7, 0x93, 0x70, 0xbd, 0x39,
	0x82, 0xb6, 0xf4, 0x75, 0xa0, 0xd0, 0xdf, 0x7f, 0x00, 0x68, 0x33, 0x95, 0xad, 0x31, 0x83, 0x49,
	0x49, 0x21, 0xe8, 0x7d, 0x17, 0xea, 0x96, 0x8f, 0xbf, 0x67, 0x70, 0xde, 0x04, 0xf1, 0x19, 0x2e,
	0x95, 0xae, 0xff, 0xe7, 0x6c, 0x91, 0x9c, 0x3d, 0xdd, 0x2b, 0x9f, 0xf5, 0x38, 0x95, 0xad, 0xe5,
	0x08, 0x57, 0x30, 0x5b, 0x53, 0x54, 0xc4, 0xdf, 0xc4, 0xca, 0x14, 0xa4, 0x22, 0x93, 0x2e, 0x8d,
	0xdb, 0xe3, 0x34, 0xed, 0x1c, 0x6f, 0x95, 0xdf, 0xa4, 0x4a, 0xfb, 0x0c, 0x72, 0xb4, 0x14, 0x2d,
	0x64, 0x65, 0x0d, 0xb9, 0x38, 0x0c, 0x32, 0x17, 0xb8, 0x81, 0xdb, 0x35, 0xc5, 0x17, 0xf3, 0x6a,
	0x98, 0x76, 0xd1, 0x78, 0xa7, 0xed, 0x10, 0xce, 0x52, 0x7c, 0x5c, 0x34, 0xff, 0xf6, 0xf4, 0x17,
	0x00, 0x00, 0xff, 0xff, 0x0b, 0x18, 0x9d, 0x09, 0xcb, 0x01, 0x00, 0x00,
}
